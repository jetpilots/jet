#!/bin/sh

start() {
    echo "\n// Autogenerated file, DO NOT EDIT.\n" > tokenkind.h
    echo "typedef enum tokenkind_e {" >> tokenkind.h
    echo "static const char* const tokenkind_e_repr[] = {" > tokenkind_e_repr.h
    echo "static const char* const tokenkind_e_srepr[] = {" > tokenkind_e_srepr.h
    echo "static const char* const tokenkind_e_names[] = {" > tokenkind_e_names.h
}

finish() {
    echo "};\n" >> tokenkind_e_repr.h
    echo "};\n" >> tokenkind_e_srepr.h
    echo "};\n" >> tokenkind_e_names.h

    echo "} tokenkind_e;\n" >> tokenkind.h
    cat tokenkind_e_names.h tokenkind_e_repr.h tokenkind_e_srepr.h >> tokenkind.h
    rm tokenkind_e_names.h tokenkind_e_repr.h tokenkind_e_srepr.h
}

add() {
    srepr=${2}
    repr=${3:-$2}
    echo "    $1," >> tokenkind.h
    if [ -n "$srepr" ]; then
        echo "    [$1] = \"$1\"," >> tokenkind_e_names.h
        echo "    [$1] = \"$srepr\"," >> tokenkind_e_srepr.h
        echo "    [$1] = \"$repr\"," >> tokenkind_e_repr.h
    fi
}

start
add tk_nullChar "EOF"

add __tk__keywords__begin

    add __tk__ctrlflow__begin
        add tk_keyword_for "for "  "for"
        add tk_keyword_while "while "  "while"
        add tk_keyword_if "if " "if"
        add tk_keyword_match "match " "match"
        add tk_keyword_case "case " "case"
        add tk_keyword_else "else"
        add tk_keyword_elif "else if " "else if"
        add tk_keyword_do " do "
        add tk_keyword_then " then "
    add __tk__ctrlflow__end

    add tk_keyword_end "end"
    add tk_keyword_enum "enum " "enum"
    add tk_keyword_function "function"
    add tk_keyword_declare "declare"
    add tk_keyword_test "test "  "test"
    add tk_keyword_check "check "  "check"

    add __tk__logicals__begin
        add tk_keyword_not "not "
        add tk_keyword_and " and "
        add tk_keyword_or " or "
        add tk_keyword_in " in "
        add tk_keyword_notin " not in "
    add __tk__logicals__end

    add tk_keyword_yes "yes"
    add tk_keyword_no "no"
    add tk_keyword_nil "nil"
    add tk_keyword_as " as "
    add tk_keyword_type "type "
    add tk_keyword_return "return "
    add tk_keyword_result " result "
    add tk_keyword_extends " extends "
    add tk_keyword_var "var "
    add tk_keyword_let "let "
    add tk_keyword_import "import "
add __tk__keywords__end ""

add tk_identifier "(id)"
add tk_argumentLabel "(lbl)"
add tk_functionCall "(call)"
add tk_subscript "(sub)"
add tk_objectInit "(obj)"
add tk_number "'123'"
add tk_identifierResolved "[id]"
add tk_functionCallResolved "[call]"
add tk_subscriptResolved "[sub]"
add tk_objectInitResolved "{obj}"
add tk_numberAsInt "123"
add tk_numberAsDbl "1.23"
add tk_numberAsUInt "+123"
add tk_multiDotNumber "1.2.3"
add tk_spaces "(spc)"
add tk_oneSpace "(sp1)"
add tk_tab "(tab)"
add tk_newline "(nl)"
add tk_lineComment "#"
add tk_alphabet "a"
add tk_ampersand "&"
add tk_arrayClose "]"
add tk_arrayOpen "["
add tk_arrayDims "[:]"
add tk_at "@"
add tk_braceClose "}"
add tk_braceOpen "{"
add tk_digit "1"
add tk_hash "#"
add tk_unaryDot "."
add tk_exclamation "!"
add tk_pipe "|"
add tk_opAssign " = " "="
add tk_varAssign "v=" "v="

add __tk__cmpOps__begin
    add tk_opEQ " == " "=="
    add tk_opNE " != " "!="
    add tk_opGE " >= " ">="
    add tk_opGT " > " ">"
    add tk_opLE " <= " "<="
    add tk_opLT " < " "<"
add __tk__cmpOps__end

add tk_opResults " -> "
add tk_opNotResults " -/> "
add tk_parenClose ")"
add tk_parenOpen "("
add tk_period "."
add tk_opComma ", "
add tk_opSemiColon "; "
add tk_opColon ":"
add tk_stringBoundary "\\\""
add tk_string "\\\"abc\\\""
add tk_rawStringBoundary "'"
add tk_rawString "'abc'"
add tk_regexpBoundary "\`"
add tk_regexp "\`abc\`"
add tk_underscore "_"

add __tk__arithOps__begin
    add tk_opSlash " / " "/"
    add tk_opBackslash " \\\\\\ " "\\\\\\"
    add tk_opPlus " + " "+"
    add tk_opMinus " - " "-"
    add tk_opUnaryMinus " -" "-"
    add tk_opTimes " * " "*"
    add tk_opPower "^"
    add tk_opPowerEq " ^= "
    add tk_opMod " % " "%"
add __tk__arithOps__end

add tk_tilde "~"
add tk_dollar "$"
add tk_units "|N.m/s"

add __tk__selfMutOps__begin
    add tk_opPlusEq " += "
    add tk_opMinusEq " -= "
    add tk_opSlashEq " /= "
    add tk_opTimesEq " *= "
    add tk_opColEq " := "
    add tk_opModEq " %= "
add __tk__selfMutOps__end

add tk_opQuestion "?"

add tk_unknown "(unk)"
finish
