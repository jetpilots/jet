
/usr/bin/include/share/file.txt


stringview which is not heap obj should keep ref to orig str which is. then refcount can be handled.

String {
    union {
        String* base; // For substrs this refers to the str it is a substr of.
        // LilEndian only
        struct { uint32 refcount; uint8 something,something2;uint8 flag; };
        // ^ only for a base str i.e. refcounted, on heap, or on stack but not
        // a substr of another string.
        // flag tells you which one it is, base string or view of another.
    }
    char *end; // this is start + len.
    char start[];
};

refcount up/down for a stringview means refcount up/down for the base.
slices/stringviews dont have or need their own refcount.

as for arrays, considering copying if a substr is much smaller than base, or else
it will keep base hanging around in mem possibly when only the substr is reqd.
