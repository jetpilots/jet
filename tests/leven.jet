~   For all i and j, d[i,j] will hold the Levenshtein distance between the     #
~   first "i" characters of "s" and the first "j" characters of "t".           #
~   Check details here: https://tinyurl.com/y857p2hf                       #
func levenstein(s String, t String) Number
    var m = len(s)
    var n = len(t)
    var d[m,n] = 0 ~this line looks like you are setting 1 elem at [m,n] to 0
    var d Number[2D]|kg.s3/m2 = zeros2D([m, n]) ~this is better regarding var decl
    ~ but zeros2D/3D/4D is a pain
    var myJunesData Number[] = zeros([m, n]) ~dynamic tensor
    var myJunesData Number[String] = zeros([m, n])
    var myJunesData[3D]|kg.s as Number = zeros([m, n])
    ~ var myJunesData::[Number|kg/s] = zeros([m, n])
~ zeros is perfectly capable of returning any rank
    ~ tensor. its just a void* as far as C is concerned.

    d[:,1] = 1:m
    d[1,:] = 1:n

    for j in 1:n
        for i in 1:m
            var cost = num(s[i] != t[j])
            d[i, j] = min([ d[i-1, j  ] + 1,          ~deletion
                            d[i,   j-1] + 1,          ~insertion
                            d[i-1, j-1] + cost])      ~substitution
        end
    end

    var dist = d[m,n]
    print("Distance between '$s' and '$t' is: $dist")

    check 0 <= dist <= min([m, n])
end


func main()
    levenstein("KITTEN", "SITTING")
    levenstein("JUMBO", "DUMBO")
    levenstein("NUMBER_OF_TIME_STEPS", "NUBER_OF_TIME_STEP")
    levenstein("PROBLEM_NAME", "PRUBLEM_NAME")
    check status in [0:255]
end