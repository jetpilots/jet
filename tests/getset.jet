
value type DateTime
    var month Number in [1:12] = 1
    ~ only primitives for set/get!!
    get dayOfWeek Number in [1:7] := dayOfYear % 7 + dayOf1Jan
    set dayOfWeek(value Number in [1:7])

    end set
    get dayOfWeek

    end get
    var myRange Range = [1:12, 15:18|k, 33:70|M] ~ this seems to be least problematic syntax for range literals R<> and I<>
end

max(R<1:7>) < min(R<7:9>)

value type Colour
    var r Number[3D] |kg.s/m3[0:1:255] = 0
    var g[:,:] in 0:1:255 = 0
    var g[:,:] Number[0:1:255] = 0
    var b Number[0:1:255] = 0
    var a Number[0:1:255] = 0
    var str String[64]
end

~ this is without bells and whistles. blocking call, returns raw text.
~ no way to get info about response, headers, status, etc. On error
~ you get a blank string.

    var postData String[String] = {
        "Accept" = "*/*",
        "Referer" = "base43.net",
        "Keep-alive" = "none"
    }

    var mdat Byte[] = download("https://wafers.com/next?ios=87",
                                post = {
                                    "Accept" = "*/*",
                                    "Referer" = "base43.net",
                                    "Keep-alive" = "none"
                                })

func loadFile()

    var file = File("~/.visz/slurp.dat")
    var ffg Byte[] = read(file)
    var ffg String = read(file, encoding=.utf8)

    catch .resourceNotFound
        print("Can't find file: $file")
        skip
    catch .memoryExhausted
        print("I'm exhausted")
        return
    end

    var accel = 89.86|kg.m2/s2 + sum(1:end:, 1:end)

end





