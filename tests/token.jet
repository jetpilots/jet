
let TokenKindTable = [
    .tkNullChar, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkNewline, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown,
    .tkSpaces, .tkExclamation,
    .tkStringBoundary, .tkHash, .tkDollar,
    .tkOpMod, .tkAmpersand, .tkRawStringBoundary,
    .tkParenOpen, .tkParenClose, .tkTimes,
    .tkPlus,  .tkOpComma, .tkMinus,
    .tkPeriod, .tkSlash, .tkDigit,
    .tkDigit, .tkDigit, .tkDigit,
    .tkDigit, .tkDigit, .tkDigit,
    .tkDigit, .tkDigit, .tkDigit,
    .tkOpColon, .tkOpSemiColon, .tkOpLT,
    .tkOpAssign, .tkOpGT, .tkQuestion,
    .tkAt,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet,
    .tkArrayOpen, .tkBackslash, .tkArrayClose,
    .tkPower, .tkUnderscore,
    .tkRegexpBoundary,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet, .tkAlphabet,
    .tkAlphabet, .tkAlphabet,
    .tkBraceOpen, .tkPipe, .tkBraceClose,
    .tkTilde,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown,
    .tkUnknown, .tkUnknown, .tkUnknown
]


#define Token_matchesKeyword(tok)                                              \
    # if (sizeof(#tok) - 1 == l and not strncmp(#tok, s, l)) ret = yes

function doesKeywordMatch(s as String, l as Number)
{

    Token_matchesKeyword(and)
    Token_matchesKeyword(cheater)
    Token_matchesKeyword(for)
    Token_matchesKeyword(do)
    Token_matchesKeyword(while)
    Token_matchesKeyword(if)
    Token_matchesKeyword(then)
    Token_matchesKeyword(end)
    Token_matchesKeyword(function)
    Token_matchesKeyword(declare)
    Token_matchesKeyword(test)
    Token_matchesKeyword(not)
    Token_matchesKeyword(and)
    Token_matchesKeyword(or)
    Token_matchesKeyword(in)
    Token_matchesKeyword(else)
    Token_matchesKeyword(type)
    #    matchesen_compareKeyword(check)
    Token_matchesKeyword(extends)
    Token_matchesKeyword(var)
    Token_matchesKeyword(let)
    Token_matchesKeyword(import)
    Token_matchesKeyword(ret =)
    Token_matchesKeyword(as)
    Token_matchesKeyword(as)
    ret = no
end

declare type Token
    var pos = ""
    var matchlen = 0
    var skipWhiteSpace = no
    var mergeArrayDims = no
    var noKeywordDetect = no
    var strictSpacing = no
    var line = 0
    always line < 50000
    var col = 0
    always col < 250
    var kind = TokenKinds.none
end type


# Peek at the char after the current (complete) token
function peekCharAfter(token as Token) as (s as String)
    var i = token.matchlen
    if token.skipWhiteSpace
        do j = 1:len(s)
            # we definitely need to allow auto converting bool to 0 or 1
            # if token.pos[i] == " " then i += 1
            i += num(token.pos[j] == " ") # no branching
        end do
    end if

    # var j = [8, 7, 6, 5, 4, 3]

    # var j[] = [8, 7, 6, 5, 4, 3]

    # var j[] = 8, 7, 6, 5, 4, 3

    # var j[:,:] = [8, 7, 6; 5, 4, 3]


    s = token.pos[i]
end function

#define Token_compareKeyword(tok)                                              \
    # if (sizeof(#tok) - 1 == l and not strncmp(#tok, s, l)) {                   \
    #     token.kind = .tkKeyword_##tok                                          \
    #     ret =                                                                \
    # end

# Check if an (ident) token.token matches a keyword and ret = its type
# accordingly.
static void Token_tryKeywordMatch(Token* token)
{
    # TODO USE A DICT OR MPH FOR THIS!
    if (token.kind != .tkIdentifier) ret =

    const char* s = token.pos
    const int l = token.matchlen

    Token_compareKeyword(and)
    Token_compareKeyword(cheater)
    Token_compareKeyword(for)
    Token_compareKeyword(do)
    Token_compareKeyword(while)
    Token_compareKeyword(if)
    Token_compareKeyword(then)
    Token_compareKeyword(end)
    Token_compareKeyword(enum)
    Token_compareKeyword(function)
    Token_compareKeyword(declare)
    Token_compareKeyword(test)
    Token_compareKeyword(not)
    Token_compareKeyword(and)
    Token_compareKeyword(or)
    Token_compareKeyword(in)
    Token_compareKeyword(else)
    Token_compareKeyword(type)
    Token_compareKeyword(check)
    Token_compareKeyword(extends)
    Token_compareKeyword(var)
    Token_compareKeyword(let)
    Token_compareKeyword(import)
    Token_compareKeyword(ret =)
    Token_compareKeyword(as)
    Token_compareKeyword(as)
    # Token_compareKeyword(elif)

    #        Token_compareKeyword(print)
    #     if (sizeof("else if") - 1 == l and not strncmp("else if", s, l))
    # {
    #     token.kind = .tkKeyword_elseif
    #     ret =
    # end
end

# Get the token kind based only on the char at the current position
# (or an offset).
function getType(token as Token, offset as Int) as (ret as TokenKind)
    const char c = token.pos[offset]
    const char cn = c ? token.pos[1 + offset]  0
    ret = (TokenKind)TokenKindTable[c]
    match token.pos
    let map[Regex] as TokenKind = {
        `^<=` = .opLE
        `^==` = .opEQ
    }
    for k as String, v[String] as Int in map
    for k as String, v as Int[String] in map
    for k as String, v as Int[] in map
    for k as String, v[] as Int in map
    for k as String, v as Int[:,:] in map
    for k as String, v[:,:] as Int in map
    for k, v in map
        if match!(token, regex=k) then ret = v
    end for

    case "<"
        match cn
        case "="
            ret = .tkOpLE
        case else
            ret = .tkOpLT
        end match
    case ">"
        match cn
        case "="
            ret = .tkOpGE
        case else
            ret = .tkOpGT
        end match
    case "="
        match cn
        case "="
            ret = .tkOpEQ
        case ">"
            ret = .tkOpResults
        case else
            ret = .tkOpAssign
        end
    case "+"
        match cn
        case "="
            ret = .tkPlusEq
        end
        ret = .tkPlus
    case "-"
        match cn
        case "="
            ret = .tkMinusEq
        end
        ret = .tkMinus
    case "*"
        match cn
        case "="
            ret = .tkTimesEq
        end
        ret = .tkTimes
    case "/"
        match cn
        case "="
            ret = .tkSlashEq
        end
        ret = .tkSlash
    case "^"
        match cn
        case "="
            ret = .tkPowerEq
        end
        ret = .tkPower
    case "%"
        match cn
        case "="
            ret = .tkOpModEq
        end
        ret = .tkOpMod
    case "!"
        match cn
        case "="
            ret = .tkOpNE
        end
        ret = .tkExclamation
    case ""
        match cn
        case "="
            ret = .tkColEq
        case else
            ret = .tkOpColon
        end
    case else
        ret = ret
    end
end

static void Token_detect(Token* token)
{
    var tt = getType(token, offset=0)
    var tt_ret as TokenKind = .tkUnknown # = tt
    var tt_last as TokenKind = .tkUnknown # the previous token.token that was found
    var tt_lastNonSpace as TokenKind = .tkUnknown # the last non-space token.token found
    TokenKind tmp
    char* start = token.pos
    bool found_e = no, found_dot = no, found_cmt = no
    uint8_t found_spc = 0

    match tt
    case .tkStringBoundary
    case .tkRegexpBoundary
    case .tkRawStringBoundary
        tmp = tt # remember which it is exactly

        # Incrementing pos is a side effect of getTypeAtCurrentPos(...)
        while (tt != .tkNullChar) {
            # here we want to consume the ending " so we move next
            # before
            token.pos++
            tt = getType(token, 0)
            if (tt == .tkNullChar or tt == tmp) {
                *token.pos = 0
                token.pos++
                break
            end
            if tt == .tkBackslash and getType(token, offset=1) == tmp # why if?
                token.pos+=1
            end if
        match tmp
        case .tkStringBoundary
            tt_ret = .tkString
            break
        case .tkRegexpBoundary
            tt_ret = .tkRegexp
            break
        case .tkRawStringBoundary
            tt_ret = .tkRawString
            break
        case else
            tt_ret = .tkUnknown
            printf("unreachable %s%d\n", __FILE__, __LINE__)
        end
        break

    case .tkSpaces
        if (tt_last == .tkOneSpace) # if prev char was a space ret =
                                   # this as a run of spaces
            while (tt != .tkNullChar) {
                # here we dont want to consume the end char, so break
                # before
                tt = getType(token, 1)
                token.pos++
                if (tt != .tkSpaces) break
            end
        else
            token.pos++
        # else its a single space
        tt_ret = .tkSpaces
        break

    case .tkOpComma
    case .tkOpSemiColon
        #        line continuation tokens
        tt_ret = tt

        while tt != .tkNullChar
            tt = getType(token, 1)
            token.pos += 1
            # line number should be incremented for line continuations
            if tt == .tkSpaces then found_spc++
            if tt == .tkExclamation then found_cmt = yes
            if tt == .tkNewline
                token.line += 1
                token.col = -found_spc - 1 # account for extra spaces
                                            # after , and for nl itself
                found_spc = 0
            end if
            if found_cmt and tt != .tkNewline
                found_spc++
                skip
            end if
            if tt != .tkSpaces and tt != .tkNewline then break
        end while
        break

    case .tkArrayOpen
        # mergearraydims should be set only when reading func args
        if not token.mergeArrayDims goto defaultToken

        while tt != .tkNullChar
            tt = getType(token, offset=1)
            token.pos += 1
            if (tt != .tkOpColon and tt != .tkOpComma) break
        end while
        tt = getType(token, offset=0)
        if tt != .tkArrayClose
            let char = token.pos[1]
            write("Expected a ']', found a '$char'. now what?")
        end if
        token.pos += 1
        tt_ret = .tkArrayDims

    case .tkAlphabet
        # case .tkPeriod
    case .tkUnderscore
        while (tt != .tkNullChar) {
            tt = getType(token, offset=1)
            token.pos++
            if (tt != .tkAlphabet and tt != .tkDigit and tt != .tkUnderscore)
                # and tt != .tkPeriod)
                break #/ validate in parser not here
        end
        tt_ret = .tkIdentifier
        break

    case .tkHash # .tkExclamation
        while (tt != .tkNullChar) {
            tt = getType(token, offset=1)
            token.pos+=1
            if (tt == .tkNewline) break
        end
        tt_ret = .tkLineComment
        break

    case .tkPipe
        while (tt != .tkNullChar) {
            tt = getType(token, offset=1)
            token.pos++
            if (tt != .tkAlphabet and tt != .tkDigit and tt != .tkSlash
                and tt != .tkPeriod)
                break
        end
        tt_ret = .tkUnits
        break

    case .tkDigit
        tt_ret = .tkNumber

        while (tt != .tkNullChar) # EOF, basically null char
        {
            tt = getType(token, offset=1)
            # numbers such as 1234500.00 are allowed
            # very crude, error-checking is parser"s job
            token.pos++

            if match(string=token.pos, prefix=["e","E","d","D"])
            # if (*token.pos == "e" or *token.pos == "E" or *token.pos == "d"
            #     or *token.pos == "D") { # will all be changed to e btw
                found_e = yes
                skip
            end if
            if found_e #) {
                found_e = no
                skip
            end if
            if tt == .tkPeriod #) {
                found_dot = yes
                skip
            end if
            if found_dot and tt == .tkPeriod then tt_ret = .tkMultiDotNumber

            if tt != .tkDigit and tt != .tkPeriod and _
                token.pos[1] != "i" then break
        end
        break

    case .tkMinus

        match tt_lastNonSpace
        case .tkParenClose
        case .tkIdentifier # TODO keywords too?
        case .tkNumber
        case .tkArrayClose
        case .tkArrayDims
        case .tkMultiDotNumber
            tt_ret = tt
        case else
            tt_ret = .tkUnaryMinus
        end match
        token.pos++

    case .tkOpNotResults
        # 3-char tokens
        token.pos++
    case .tkOpEQ
    case .tkOpGE
    case .tkOpLE
    case .tkOpNE
    case .tkOpResults
    case .tkBackslash
    case .tkColEq
    case .tkPlusEq
    case .tkMinusEq
    case .tkTimesEq
    case .tkSlashEq
    case .tkPowerEq
    case .tkOpModEq

        # 2-char tokens
        token.pos++
    case else
    defaultToken
        tt_ret = tt
        token.pos++
        break
    end

    token.matchlen = (uint32_t)(token.pos - start)
    token.pos = start
    token.kind = tt_ret

    if (token.kind == .tkIdentifier) Token_tryKeywordMatch(token)

    if (token.kind == .tkSpaces and token.matchlen == 1) token.kind = .tkOneSpace

    tt_last = token.kind
    if (tt_last != .tkOneSpace and tt_last != .tkSpaces)
        tt_lastNonSpace = tt_last
end

# Advance to the next token.token (skip whitespace if `skipws` is set).
function advance(token as Token)
    match token.kind
    case .tkIdentifier, .tkString, .tkNumber, .tkMultiDotNumber,
    .tkFunctionCall, .tkSubscript, .tkDigit, .tkAlphabet, .tkRawString, .tkRegexp,
    .tkUnits, .tkKeywordCheater, .tkKeywordFor, .tkKeywordWhile, .tkKeywordIf,
    .tkKeywordEnd, .tkKeywordFunction, .tkKeywordTest, .tkKeywordNot,
    .tkKeywordAnd, .tkKeywordOr, .tkKeywordIn, .tkKeywordDo, .tkKeywordThen,
    .tkKeywordAs, .tkKeywordElse, .tkKeywordType, .tkKeywordret =,
    .tkKeywordExtends, .tkKeywordVar, .tkKeywordLet, .tkKeywordImport,
    .tkUnknown # bcz start of the file is this
        break
    case else
        *token.pos = 0 # trample it so that idents etc. can be assigned
                        # in-situ
    end

    token.pos += token.matchlen
    token.col += token.matchlen
    token.matchlen = 0
    detect!(token)

    if token.kind == .tkNewline
        # WHY don"t you do token.token advance here?
        token.line += 1
        token.col = 0 # position of the nl itself is 0
    end if
    if token.skipWhiteSpace and (
        token.kind == .tkSpaces or (
            token.strictSpacing and token.kind == .tkOneSpace)))
        advance!(token!, ignore=no)
    end if
end function
#
