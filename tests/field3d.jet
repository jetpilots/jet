
value type Point
    var x = 0
    var y = 0
    var z = 0
end

type Outer
    var point Point
    var inner Inner
end

~ // generated binary writer func
~ // currpos will be passed recursively, 0 (or size of file header) + sizeof(roottype) for root object
define FP_PTR2OFF(member) out.member = (void*) *currpos; *currpos += sizeof(*member);
void Outer_writefbin(Outer* self, FILE* file, size_t* currpos)
{
static Outer out;
out = *self; ~ // make a copy. can be static to avoid blowing stack, ok if its clobbered by inner calls since the object will have been written out and not used later.
    *currpos += sizeof(out);
~ // currpos is not the currpos to write the file at, but tracks how many btytes were written cumulatively so far
~ loop over members and change pointers to offsets
~ // skip over Point since it is a value type
~ out.inner = (void*)currpos; ~ // C will take care of void* -> type*
~ currpos += sizeof(*out.inner);
FP_PTR2OFF(inner);
~ // similarly for all members
~ // now write the current object
fwrite(&out, sizeof(out),1,file);
~ // now write out all the reference types. note that the current type is fully written
~ // so output is not nested. so you can read partial files.
~ basically if you write them out in the same order, the offsets you predicted
~ // before will match.
Inner_writefbin(out.inner, file, &currpos);
}

Inner_writefbin(Inner* self, FILE* file, size_t *currpos) {
    static Inner out;
    out = *self;
    *currpos += sizeof(out);
    FP_PTR2OFF(state);
FP_PTR2OFF(counts);

fwrite(&out, sizeof(out),1,file);

Text_writefbin(out.state, file, &currpos);
Integer_Array_writefbin(out.counts, file, &currpos);

 }

Text_writefbin(Text* self, FILE* file, size_t* currpos) {
    fwrite(self->ref, self->len, 1, file);
    char c = 0;
    fwrite(&c, 1, 1, file);
    *currpos += self->len+1;
    ~ // remember while reading, self->alloc must be clipped down to the actual len
    ~ // no children
}

// NOPE! you will read whole file in 1 shot to a bunch of bytes (or mmap it)
// then you walk the bytes. so 1 shot memory alloc. but cant extract inner & free outer
Inner* Inner_readfbin( FILE* file) {
    Inner* self = new(Inner);
    self->state = Text_readfbin
}

Text* Text_readfbin( FILE*file, size_t baseoffset) {
    Text*self = new(Text);
    fread(self,sizeof(Text), 1,file);
self->ref += baseoffset;
    self->ref[self->len]=0;
    fread(self->ref,self->len, 1,file);
}
Integer_Array* Integer_Array_readfbin(FILE*file) {
    Integer_Array*self = new(Integer_Array);
    self->ref = palloc(self->len*sizeof(Integer));
    fread(self->ref,self->len, sizeof(Integer), file);
}

Integer_Array_writefbin(Integer_Array* self, FILE* file, size_t* currpos) {
    fwrite(self->ref, self->len, sizeof(Integer), file);
    *currpos += self->len*sizeof(Integer);
    ~ // remember while reading, self->alloc must be clipped down to the actual len
    ~ // no children
}


type Inner
    var state Text = ""
    var counts Integer[]
end

type Point
    var x Real
    var y Real
    var z Real
end

type Edge
    var p1 Point
    var p2 Point
end

type Face
    var edges Edge[]
end

type Cell
    var faces Face[]
end

type Mesh2D
    var points Point[]
    var edges Edge[]
    var faces Face[]
    var centroids Point[]
    var areas Real[]|m2
    var area Real|m2 = 0
    check areas.size == faces.size == centroids.size
end

type Mesh3D
    var points Point[]
    var faces Face[]
    var cells Cell[]
    var centroids Point[]
    var volumes|m3 as Real[]
    var volume|m3 as Real = 0
    ~ can you handle more than 3 way cmps?
    ~ e.g. check a == b == c == d == e >= 4
    ~ SHOULD you?
    hold centroids.size == cells.size == volumes.size
end

~ Can you come up with a general (in dims) way of doing SoA to AoS or vice
~ versa automatically? It is like a transpose in 2D followed by indices flip.
~ (YES BOTH.) what about higher dims,
~ and how to express it like C arr[x][y] -> arrT[y][x] ?
~ btw the members must be all of the same size for SoA -> AoS conversion
~ one idea is to transform the whole thing into 1 array when doing genc
~ instead of the type coming out, its just ONE Real array indexed once to
~ get the member then again to get the element of the member
type Field3D
    var u[] Real|m/s
    var v[] Real|m/s
    var w[] Real|m/s
    var p[] Real|Pa
    var r[] Real|kg/m3
    var k[] Real|m2/s
    var e[] Real|m2/s3
    var ut[] Real|s/m2 nosave ~ no output in serialisation
    var y[2D] as Real|1
    var mesh Mesh3D
end

~ If you could have automatic AoS -> SoA this would be (user-facing)
type CellState
    var u Real|m/s
    var v Real|m/s
    var w Real|m/s
    var p Real|Pa
    var r Real|kg/m3
    var k Real|m2/s
    var e Real|m2/s3
    var ut Real|s/m2 nosave ~ don't write it out in serialization. btw you should take a flag links= in serialize(), jetson(), yaml() etc. that says whether to copy or preserve links.
    var y[] Real|1
end
~ aside: how also about funcs ct.name(v) ct.saved(v) ct.typeof(v) ct.sizeof(v) ct.units(v) ct.range(v) ct.count(v) etc. all COMPILE TIME only nah

type Field3D
    var s CellState[] ~ seeing this, the compiler should mark CellState for
    ~ AoS->SoA conversion. well not merely seeing this, there should be actual
    ~ usage in downstream code that suggests SoA conversion will pay off.
    ~ or you could do it yourself with keyword soa
    var mesh Mesh3D
end

s[i].u becomes s.u[i] and so on
let ofo := offset of
s[i][ofo(u)] becomes s[ofo(u)][i]
where s is cgenerated by converting each primitive to a ptr of its kind
struct CellState { Real *u, *v, *w, *p, *r, *k, *e, *y[]; }; // SoA
AND NOT AS WOULD NORMALLY BE DONE (when no SoA conversion is needed):
struct CellState { Real u, v, w, p, r, k, e, y[]; }; // AoS (this is 1 elem)
~ if the sizes of members are the same (yes if of the same type duh), do this:
struct CellState_ { Real **ref; }; // SoA CellState is meant, not AoS
now you can cast a CellState* s to a CellState_* s_ seamlessly and shamelessly
where s_.ref[0] => u, s_.ref[1] => v and so on. ofo(v) = 1, ofo(u) = 0, ...
~ aside: C offsetof will measure bytes, you need um, indices, of type (Real).
~ another argument in favour of keeping everything 64-bit. but what about 32-bit OSs?
s_.ref[0][i] is s.u[i] and so on. But the user has written s[i].u everywhere...

so cgen all s[i].u calls into s[i][ofo(u)] -> s_.ref[ofo(u)][i] ~ note the flip

finally, s_ is not separately generated, but s itelf is generated as s_ would have been (i.e. transposed).

allocator has some work to allocate individual members now if you dont generate CellState_.
*****
BTW e.g. ofo(v) is not ofo(u) + 1 but ofo(u) + N where N is the array size.
*****
you know the typeType of s, if it is marked for SoA then transform indexes into
it as indexes into its dot-child. (actually this might rid you of having to generate
CellState_ entirely). Really cgen s[i].u as not s[i]->u but s->u[i]. is that doable?
its much nicer for readability and allowing cc to do what it likes. Also works great
for y: s[i].(y[j]) becomes s->(y[j])[i] and you dont have to care about ofo(y[j]),
otherwise ofo(y[j]) is a runtime cost for unknown j. (NO it is a runtime cost anyway).
*****
great lets try a bit more: s[i].y[j].x (assume there was such a thing)
in this case you have to know whether x is better off as row-major or col-major.
depending on that the ideal case is either s->y->x[i][j] or s->y->x[j][i].
IF both s and y are marked SoA.
step by step: if s is SoA:
s[i].y[j].x ==> s->y[i][j] -> s->y->x[i][j] OR
s[i].y[j].x ==> s->y[j][i] -> s->y->x[j][i]
*****


the tricky part is handling the last *y (kind of like C handles a last [] at
the end of a struct). No its not if you let C do it -> y[] becomes *y[] not **y.
The allocator should deal with the rest. if soa-marked types have [] in between,
raise an error, or if soa-decided arrays are prevented by a [] in between, put
this in the optimisation report.


var x[][][] as Number = zeros([3, j, j+4])

x[8:end][8:9][c:yu]
x[8:end, 8:9, c:yu]

The x[][] business only comes up if you allow indexing arbitrary types.
x[i] cannot be a collection otherwise. at best it will be a type with members.
access the member, then index that. easy. get rid of x[][] idea




~# COMPLEX
var r = -1
var s = sqrt(r) ~ error
var c = -1 + 0i
var x = sqrt(c) ~ works, returns Complex[2]
var y = cbrt(c) ~ works, returns Complex[3]

~ how about instead of operator overload on [], there is an implicit
~ op that indexes into the first member (if it is an array)

operator index
operator filter
operator slice
operator select
operator hash
operator add
operator sub
operator mul
operator div
operator equal

type VectorField3D
    var values Real[]
    var mesh Mesh3D
end

func mean(field Field3D) -> ans Real
    ~ volume weighted average of the scalar field's values on the mesh
    ans = sum(field.mesh.volumes * field.values) ...
        / sum(field.mesh.volumes)
end

func map(source Field3D, dest Mesh3D) Field3D
    map = Field3D(mesh=dest)
    map.values[:] = interp(source, atPoints=map.mesh.points[:])
end

map(source Field3D, dest Mesh3D) :=
    Field3D {
        .values = interp(source, at = ans.mesh.points),
        .mesh = dest
    }
