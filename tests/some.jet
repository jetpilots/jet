func unsetPrinted(expr ASTExpr)
    match expr.kind
    case .identResolved, .varAssign
        expr.var.flags.printed = no
    case .funcCallResolved, .funcCall,
         .subscriptResolved, .subscript,
         .keywordIf, .keywordFor,
         .keywordElse, .keywordWhile
        unsetPrintedVarsFlag(expr.left)
    case else
        if expr.prec
            if not expr.unary then unsetPrintedVarsFlag(expr.left)
            unsetPrintedVarsFlag(expr.right)
        end
    end match
end

func genPrintVars(expr ASTExpr[String], level Number[:,:])
    let spc as String = repeat("    ", times = level)
    match expr.kind
    case .identResolved, .varAssign
        if expr.var.flags.printed then return
        let name = expr.var.name
        let fmt as String = format(expr.var.init.typeType, quoted = yes)
        print("${spc}printf('    $name = $fmt\\n', $name);")
        expr.var.flags.printed = yes
    case .funcCallResolved, .funcCall,
         .subscriptResolved, .subscript,
         .keywordIf, .keywordElse,
         .keywordFor, .keywordWhile
        genPrintVars(expr.left, level = level)
    case else
        if expr.prec
            if not expr.unary then genPrintVars(expr.left, level = level)
            genPrintVars(expr.right, level = level)
        end
    end match
end

func promotionCandidate(expr ASTExpr) as ASTExpr
    match expr.kind
    case .funcCallResolved
        try
            ret = promotionCandidate(expr.left)
        catch Errors.notFound
            if mustPromote(expr.func.selector) then ret = expr
        end try
    case .subscriptResolved, .subscript,
         .keywordIf, .keywordElse, .keywordFor, .keywordWhile
        ret = promotionCandidate(expr.left) or throw
    case .varAssign
        ret = promotionCandidate(expr.left) or throw
    case else
        if expr.prec
            try
                ret = promotionCandidate(expr.right)
            catch Errors.notFound
                if not expr.unary
                    ret = promotionCandidate(expr.right) or throw
                end
            end try
        end
    end match
    throw Errors.notFound
end

let prom = promotionCandidate(stmt) or skip/break/return
prom.left = ... # this should work since there is a skip above

func promotionCandidate(expr ASTExpr) result (ret ASTExpr)
    match expr.kind
    case .funcCallResolved
        ret = promotionCandidate(expr.left)
        if ret == nil and mustPromote(expr.func.selector) then ret = expr
    case .subscriptResolved,
         .subscript,
         .keywordIf,
         .keywordElse,
         .keywordFor,
         .keywordWhile,
         .varAssign
        ret = promotionCandidate(expr.left)
    case else
        if expr.prec
            ret = promotionCandidate(&expr.right)
            if ret == nil and not expr.unary
                ret = promotionCandidate(expr.right)
            end
        end
    end match
end