
~ $ Array(T) GArray(sizeof(T), 32)
~ $ ArrayN(T,D) GArrayN(sizeof(T), D, 32)
~ $ ArrayL(T) GArray(sizeof(T), 64)
~ $ ArrayNL(T,D) GArrayN(sizeof(T), D, 64)

~ $ Slice(T) GSlice(sizeof(T), 32)
~ $ SliceN(T,D) GSliceN(sizeof(T), D, 32)
~ $ SliceL(T) GSlice(sizeof(T), 64)
~ $ SliceNL(T,D) GSliceN(sizeof(T), D, 64)


declare type T
declare type I

type GArray
    var ref T
    var len I
    var cap I
end
func push!(self Array, item T)
func justPush!(self Array, item T)
func pushp!(self Array) as T*
func pop!(self Array) as T
func concat!(self Array, otherArray Array)
func insert!(self Array, item T)
func insert!(self Array, item T, at I)
func insert!(self Array, item T, before T)
func insert!(self Array, item T, after T)
func remove!(self Array, atIndex I)
func remove!(self Array, item T)
func contains(self Array, item T) as Boolean
func count(self Array) as I
func count(self Array, filter Expr) as I
func any(self Array) as Boolean
func all(self Array) as Boolean
func copy(self Array) as Array
func any(self Array, filter Expr) as Boolean
func all(self Array, filter Expr) as Boolean
func copy(self Array, filter Expr) as Array


func write(self Array)
~ write textual repr to file, to string, to screen,
~ whatever -- basically calls write() of elements
~ write(self[0], ", ", self[4]) etc
func write(self Array, filter Expr)
func get(self Array, atIndex I) as T
func getSafely(self Array, atIndex I) as T
func inbounds(self Array, atIndex I) as Boolean
func realIndex(self Array, atIndex I) as I
~ +ve, in n-d all dims collapsed
func set!(self Array, atIndex I)
func setSafely!(self Array, atIndex I)
func setItemsInSlice!(slice Slice, otherArray Array, offset I)
~ offset of start atIndex between this array and other. same slice info is used
func firstIndex(self Array, item T) as I
func lastIndex(self Array, item T) as I
func swap!(self Array, index1 I, index2 I)
func clear!(self Array)
func sortQuick!(self Array)
func sortMerge!(self Array)
func shuffleKnuth!(self Array)
func searchBinary(self Array, forValue T)
func clone(self Array) Array
func getFullSlice(self Array) Slice
func equals(self Array, otherArray Array) as Boolean

~ filter/map -- but it should be impl as a macro. besides funcs r elemental
func join(self Array, sep String) as String
func add!(self Array, otherArray Array)
func sub!(self Array, otherArray Array)
func mul!(self Array, otherArray Array)
func div!(self Array, otherArray Array)
func pow!(self Array, otherArray Array)
func mod!(self Array, otherArray Array)
func add1!(self Array, value T)
func sub1!(self Array, value T)
func mul1!(self Array, value T)
func div1!(self Array, value T)
func pow1!(self Array, value T)
func mod1!(self Array, value T)

&////////////////////////////////////////////////////////////////////////////////
 GArrayN
> T, D, I
^ GArray(S, I)
% int(I) dlen[D]

type ArrayN extends Array
    var dlen[D] = 0
end

type GSlice
    var ref Array
    var start = 0
    var stop = 0
    var step = 1
    var pos = 0
end

func reset
func hasNext
func next
&////////////////////////////////////////////////////////////////////////////////
 GSliceN
> S, D, I
% GArrayN(S, D, I)* ref
% int(I) start, stop, step, pos

