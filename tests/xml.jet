~include "jetbase.h"
~include "jetsys_time.h"

decl type Attr
    var key String
    var val String
end

decl type Node
    var tag String
    var attributes Attr[]
    var text String
    var children Node[]
end

decl type Parser
    var filename String
    var line Number ~in [0:50M]    ~check 0 <= line <= 50k ~redundant invariant caught at comptime
    var col Number ~in [0:132]     ~check 0 <= col <= 132    ~data as String
    var data Byte[]     ~pos as String     ~ends as String
end

var size[4D] in [6:78] = 12.4|MB
var nonDimButScaled = 50|k or 50k

Parser(fromText as String) :=
    Parser {
        .data = clone(fromText),
        .pos = 1,
        .ends = len(fromText)}

func Parser(file as String)

    var f = FileInfo(file)
    ~ like this and DateTime, a lot of types need to be instantiated
    ~ with something and the non-overridable default ctor doesn't make
    ~ sense. how about allowing it to be overridden?

    if not f.exists
        panic("F+: file '$file' not found.")
    else if f.directory
        panic("F+: '$file' is a folder; only files are accepted.")
    else if not f.permissions.read
        panic("F+: no permission to read file '$file'.")
    end
    ~ panic(...) := write(..., to=stderr) and stop

    ans = Parser {
            .file = file,
            .data = read(file, encoding=.shiftJis),
            .pos = .data,
            .end = .pos + len(.data)
        }

~ String is mutable which means raw strings will have to be pstrdup'd at runtime.
~ you can access bytes (chars) of a text using [] -> no need for memoryblock.
~ if encoding is ASCII/CP12xx/ISO8859 then [] is O(1), for UTF8 it is O(N).
~ if you don't want to edit text in place, use explicit copy().
~ -------- THIS IS WHAT I WOULD LOVE TO HAVE.
~ -------- BUT FOR A SIMPLE AND "SAFE" LANGUAGE THIS IS A PROBLEM

~ -- SOOOOOOO text should APPEAR TO BE IMMUTABLE on the Jet side but funcs
~ should be implemented in a mutable way in C and Jet calls should be translated
~ to mutating an existing string IF they are inplaceable.
var txt String = read(file, encoding=TextEncodings.ascii)
~    -> this func just does {t=read(file);t.encoding=.ascii;ret t;}
var bytes Byte[] = read(file)
~ do whatever with bytes
var tyt = String(bytes, encoding=.ascii) ~this is a copy if byt is used later else move
~ var by as Byte[] = bytes(txt) ~this is a copy if you use txt later, but otherwise a move

~ var by as Byte[] = read(file) ~this is a move

~ if String is immutable but byte array is mutable then it incurs an implicit copy
~ unless the var is not used later then it can be made a move

end

func parseAttrs(par as Parser) Attr[]
    ~ GET RID OF ALIAS/MACRO BUSINESS!

    while char(par) not in ">/?"
        let name as String = pos
        advance!(par, toFirst='=')
        trample!(par)

        var markers Regex = ``
        if char(par) in ['"', "'"]
            markers = char(par)
            advance!(par)
        else
            markers = " >/?\t\n"
        end

        var val String = pos

        advance!(par, past=markers)
        trample!(par, toFirst="[?>")

        ~ this ALIAS business is a terrible idea, you lose track of what is happening
        ~ when focused in a local block. how is c related to pos again?
        trample!(par, ifCharIs=' ')
        advance!(par, past="\s")
        ans[end+1] = Attr { .key = name, .val = val }
    end
end

~ Trample the character at the current position to null, and advance.
func trample!(par Parser)
    par.data[par.pos] = 0
    par.pos += 1
end

skipws!(par Parser) :=
    while par.data[par.pos] == " " do par.pos += 1

func parseTags!(par as Parser) result (list Node[])

    ~ ref pos as Number = par.pos
    ~ --> pos is generated as *pos in C, works on lhs/rhs. refs have a
    ~ property `index` and a private var that is *Type. accessing/setting a
    ~ ref acts on *pos. incr/dec works by setting pos.index += -= 1. this is
    ~ a setter that actually moves the pointer. the index is not stored, it is
    ~ computed by subtracting origpos from pos.
    ~ yeah well this is becoming a slice with 1 index

    ~ ref data as String = par.data
    ~ ref c as String = data[pos]
~ fortran equivalence

    while not eof(par) #par.pos < par.ends
        match char(par) #par.data[par.pos]
        case " ", "\t", "\n"
            advance!(par)

        case "<"
            trample!(par)
            var noChild = no

            if matches!(par, str='/')  ~closing tag here means empty content
                trample!(par)
                return    ~null if no elements were found at this level

             else if matches(par, str="[CDATA[")   ~cdata

             else
                var node Node = { .tag = str(par) }

                advance!(par, toLast=`[ />\n\t]`)
                if char(par) == ' '
                    trample!(par)
                    advance!(par, past=" \t\n")
                    node.attributes = parseAttrs(par)
                end

                advance!(par, past=" \t\n")

                match c
                case `[/?]`
                    trample!(par)
                    check matches(par, ">")
                    noChild = yes
                    fall

                case ">"
                    trample!(par)
                    if not noChild
                        node.children = parseTags!(par)

                        var closingTag = str(par)
                        advance!(par, toFirst='>') ~other variants advance_past and advance_by
                        ~ i guess instead of advance_past going past the last match, it should
                        ~ stop at the last match. also be named differently then.
                        trample!(par)

                        if not closingTag
                            panic("error: found end of file, expected '</$node.tag>'")
                        else if closingTag != node.tag
                            panic("error: found '</$closingTag>', expected '</$node.tag>'")
                        end
                    end

                case else
                    let char as String = c
                    panic("oops1: unexpected '$char'")

                end

                list[end+1] = node
             end

        else
            var text String = str(par) ~still need to eliminate String
            advance!(par, toFirst='<')
            list[end+1] = Node { .text = text }

        end
    end

    if not eof(par) then write("error: data unparsed")
end


~ In Jet, you don't define the write() function on the basis of the str() func
~ but the other way around (actually you can think of this as the same in C, if
~ you know how to printf you can use the same for sprintf, but it can be both
~ ways in C). In Jet, if have defined the write() method, the string() method
~ is automatically available. In general the string() method cannot be defined
~ like a normal func at all, for any type in Jet.
~ this is because I don't want to have a constructed string as the basis for
~ output. print(string(x)) should get rid of the middleman for one thing. another
~ is that ehhhh ---- noo
~ actually it can work the other way around, you just have to look at the
~ str() definition and glean what the write() should be. str() will mostly
~ just have string interps. it's easier for the user to define it like that
~ although more work for me to write such a general inference routine.

~ string interps make it quite easy, dont u think
str(x Attr) := "$x.key='$x.value'"
~ compare that to the write defn
write(x Attr) := write("$x.key='$x.value'")
~ ok, you have explicit 1-on-1 map of write() to printf() for genc. or is it?
~ you still do the same string interp. in the same sense you also have a 1on1
~ of the string itself (w/ interps) to snprintf.

~ if you aren't following along, what I'm trying to avoid is:
write(x) := write(str(x))
~ which is the easiest but stupidest solution. this is after all the best
~ programming language in the history of human civilisation.

~ I guess you cannot prevent someone from defining write() and not doing anything
~ in it that resembles writing, and then you have abotched str() too, but if
~ you do it the other way around you can complain if a string isn't returned.

~ BTW how about this: if you define 1 you get the other free, unless you
~ define both (if you REALLY need different str vs write)

~ BTW I guess repr is a better name than str/string.

~---
~ how about basic polymorphism? structs keep a field with a few bits that
~ says which subclass of a particular base class they are. so not a global ID,
~ just a subclass ID which can fit in 3-4 bits. Then there is a dispatch func
~ that runs for these. this allows keeping a subclass item in a base class var
~ but dispatching to the subclass impl instead of baseclass impl
~ 1 thing is it is implicit, you can have
var fx FXBase
if ask()=='y' ~-- btw temporaries/rvalues that allocate must be discarded
~ immediately after use! ask() retval is an owned var not assigned to
~ any ref so you cant track it. if you promote ALL funcs then it can be tracked.
    fx = FXSubClassA("test")
else
    fx = FXSubClassB()
end
var d = funcy(fx) ~<-- not clear to the user what func will be called, not even decidable statically.
~ just stick with composition over ineritance.
~ the reason for getting into this was you could then have ASTExpr and subtypes
~ and have jet autogenerate dispatch switch that is handwritten in C now.
~ also it would help in automatic structure packing since you would know what
~ goes where.

func parse(p Parser) as Node[]
    var b Byte[] = bytes(p.text.len)
end

write(attr Attr) := write(" $attr.key='$attr.val'")
write(node Node) := write(node, indent=0)

write(nodeList Node[], indent Int) :=
    for xn as Node = nodeList[1:end] do write(child, indent=indent)


String const spaces
    = "                                                 "

func write(node Node, indent Int)
    if node.tag != ""
        write("%. s<%s%s", indent, spaces, node.tag,
            node.attributes ? "" : node.children ? ">\n" : "/>\n")
        write(node.attributes, indent=indent)
        if len(node.attributes)>0 then write("%s\n", node.children ? ">" : " />")

        write(node.children, indent=indent+2)
        if len(node.children)>0 then write(" " * indent, node.tag)
    else
        write(" " * indent, node.text)
    end
end

var xmlstr =
    '<?xml version="1.0"?>
        <Tests xmlns="http://www.adatum.com">
        <Test TestId="0001" TestType="CMD">
            <Name>Convert number to string</Name>
            <CommandLine>Examp1.EXE</CommandLine>
            <Input>1</Input>
            <Output>One</Output>
        </Test>
        <Test TestId="0002" TestType="CMD">
            <Name>Find succeeding characters</Name>
            <CommandLine>Examp2.EXE</CommandLine>
            <Input>abc</Input>
            <Output>def</Output>
        </Test>
        <Test TestId="0003" TestType="GUI">
            <Name>Convert multiple numbers to strings</Name>
            <CommandLine>Examp2.EXE /Verbose</CommandLine>
            <Input>123</Input>
            <output>One Two Three</Output>
        </Test>
        <Test TestId="0004" TestType="GUI">
            <Name>Find correlated key</Name>
            <CommandLine>Examp3.EXE</CommandLine>
            <Input>a1</Input>
            <Output>b1</Output>
        </Test>
        <Test TestId="0005" TestType="GUI">
            <Name>Count characters</Name>
            <CommandLine>FinalExamp.EXE</CommandLine>
            <Input>This is a test</Input>
            <Output>14</Output>
        </Test>
        <Test TestId="0006" TestType="GUI">
            <Name>Another Test</Name>
            <CommandLine>Examp2.EXE</CommandLine>
            <Input>Test Input</Input>
            <Output>10</Output>
        </Test>
    </Tests>'

func start()

    if len(os.args) == 0 then panic("usage: $os.cmd <filename>")

    var t0 = clock()
    var myxml = readxml(os.args[1])
    ~ var myxml = read(os.args[1]) to Doc ~this is then just a conversion of string to Doc
    ~ var mydat = read(os.args[1]) to Table with { .sep = ';', .skip = 3} ~this works as well!
    ~ ~basically `as` is an operator that is implemented by types taking some other type to convert from
    ~ ~but what about
    ~ var mystr = read(os.args[1])
    ~ var myxml = mystr to  to JSON to Webpage
    ~ if mystr is used elsewhere afterwards, WHOA it should also not have refs that
    ~ are used afterwrds -- this affects the whole inplacing strategy. then we have
    ~ to disallow refs completely.
    ~ so if mystr isn't used elsewhere, this is __from(mystr) else it is
    ~ __from(clone(mystr). i.e. _from (impl of as) is always written inplace.
    ~ BTW you also clone if it is a `let` (module global, function arg, etc)

    if os.args has "-d" then write(myxml)
    var tms = clock(t0)

    "\e[1mTime elapsed:\e[0m %.1f ms (%.2f GB/s)\n", tms|ms,
        1 / ((tms / 1e3)   1e9 / (par.end - par.data)), file=stdout)  ~sw.write()

end

func stats(fileSize Number|B in <0:2^24>,
      fileModified as YesOrNo,
      fileRange as Number[3D] in <2:29>) result (ret Number[2D])

    ~ var sret as Number[3D] = clone(inArg)
    ~ let fileSize|B
    ~ let fileModified::YesOrNo
    ~ let fileRange as Number[3D] in <2:1:29> ~<2:29> is RealRange, <2:1:29> is IntRange
    check fileRange in <2:29>

    var pctUsed = jet.gPool.usedTotal * 100 / jet.gPool.capTotal
    var nodeToFileRatio = jet.gPool.usedTotal / fileSize
    var strSpaceUtil = jet.sPool.usedTotal * 100 / jet.sPool.capTotal

    write(
    "-------------------------------------------------------
        Total size of nodes                     = $(jet.gPool.usedTotal)(7) B
        Space allocated for nodes               = $(jet.gPool.capTotal)(7) B
        Node space utilisation                  = $(pctUsed)(7.1) %
    -------------------------------------------------------
        File size                               = $(fileSize)(7) B
        Node size to file size ratio            = $(nodeToFileRatio)(7.1) x
    -------------------------------------------------------
        Space used for strings                  = $(jet.sPool.usedTotal)(7) B
        Allocated for strings                   = $(jet.sPool.capTotal)(7) B
        Space utilisation                       = $(strSpaceUtil)(7.1) %%
    -------------------------------------------------------", to=stdout)

end


    ~ if try os.argv[2] == "d" then write(xml)

    ~ ~try has nothing to do with catch
    ~ ~it takes a bool expr and if the expr can be eval'd it returns it
    ~ ~or else it returns false
    ~ if os.argv[2] == "d" then write(xml)
    ~ ignore .outOfBounds

    ~ if os.argv[2] == "d" then write(xml)
    ~ catch .outOfBounds ignore

    ~ try if os.argv[2] == "d" then write(xml)
    ~ try takes single statements only, and only statements that can throw

    ~ yeah why not just design it differently?
    ~ if os.args has "-d" then write(xml)
    ~ if "-d" in os.args then write(xml)
    ~ write(xml) if "-d" in os.args