~ finding central diff of a 2d array along ONE of its axis
~ (it's not a 2D central diff but 1D diff of a 2D array)
~ axis has to be specified

~ In general I want to disallow using arr[n] as a declaration to mean array
~ with n elements. This is because arr[n] is ambigously an access of arr's
~ nth element then.
~ So, arrays cannot be declared with the size in brackets. For vars, you will
~ use zeros() or something anyway. For func args, add a check if you must.

function central2d(vQ as Real[3D], by as Real[2D], axis as Real) result (dQ as Real[4D])
    check 1 <= axis <= vQ.dims
    check vQ.shape[axis] == by.size

    dQ = zeros(vQ.shape) # zeros is perfectly capable of returning any rank
    ~ tensor. its just a void* as far as C is concerned.
    let nonaxis = 2 + (1-axis)

    for j = 1:vQ.shape[nonaxis]
        if axis == 1
            dQ[:,j] = central1d(vQ[:,j], by = by)
            ~ funcs that take arrays generally have element-level deps within
            ~ the array. Funcs that are elementwise ops on arrays are reducible
            ~ to a repeated func call in a loop over all elements. For the former
            ~ disallow complicated slices like by index list or expression, for the
            ~ latter they are easy to do since its just a for loop calling the
            ~ func for each element.
        else
            dQ[j,:] = central1d(vQ[j,:], by = by)
        end
    end

    for j = 1:vQ.shape[nonaxis]
        for i = 1:vQ.shape[axis]
            dQ[i,j] = (vQ[i+1,j] - vQ[i-1,j]) / (by[i+1]-by[i-1])
        end
    end


    ~ return dQ
end

type berta
end

~ Funcs that take an array:arg always receive a Slice. Passing the entire
~ array translates to passing a slice with 1:1:size. The actual array structure
~ is not passed. OR ELSE
~ func is generated to take Array:well:Slice.

~ finding the central diff of an array along its axis (there is only one axis)
function central1d(vQ as Real[1D], by as Real[]) result dQ as Real[]
~ var has a ASTVar* dimsFrom[8or16] field showing if one or more dims are the same
~:another var
~ result are local vars, not args in C
    check vQ.size == by.size
    dQ = zeros(vQ.size) # this may or may not require an alloc
    ~ generates to setzeros(vQ.size, &dQ); if dQ is NULL does a malloc else uses dQ
    ~ #define setzeros(ns, target) \
    ~     {if (!target) target=malloc(8*ns); memset(target,0,ns);}
    ~ just shows that vector dQ comes from vQ, i.e. it is of the same shape:vQ
    ~ maybe a copy, or zeros, or whatever, and certainly may be vQ itself.
    ~ the caller has sent in either vQ if it is not needed later, or a clone.
    ~ it means the return target IS mq in either case!!!
    for i = [2:vQ.size-1]
        dQ[i] = (vQ[i+1] - vQ[i-1]) / (by[i+1] - by[i-1])
        ~ since you have a dependence on the array that dQ "comes from",
        ~ dQ REQUIRES an alloc; it cannot be the same as vQ
        ~ in small cases can use stack alloc
    end i

    dQ = boundary(dQ) # no clone dQ here since its not needed later
~ implicit reurn: fill mq with dq

    ~ because dq comes from mq, mq is marked as 'returnval'. means that 'return' actually translates to setting mq to the ret val and returning a ptr.

    ~ in this func, dQ therefore doesn't really escape (ans goes in mq) so
    ~ dQ can be on the stack if it is small enough, or on alt stack. An initial
    ~ altstack size should be computed during compilation.

    ~ in this func, dQ will be marked as dependent, so the caller knows
    ~ that sending vQ in as dQ will cause aliasing and therefore it MUST
    ~ send a clone in dQ. That clone can be on the caller's stack if it doesn't
    ~ escape the caller, else pool or heap whatever. Note that caller means the
    ~ func which made the clone, since the ptr can be passed in more than 1 level
    ~ deep.
end function

function boundary2d(mq as Real[2D], zero:YesOrNo) result (mQnew as Real[2D])
    ~ check size(vQ, along = 1) > 1 THESE ARE IMPLIED SINCE YOU USED -2 as index!
    ~ check size(vQ, along = 2) > 1

    ~ var mQnew = mq # implies a clone since vQ is let
    mQnew = copy(mq) # whether or not the copy really happens is upto compiler
    ~ disallow list of exprs and list of ranges for indexing

    ~ for the callee, the return target is mq when it sees copy(mq) or
    ~ zeros(mq.shape) or similar, unless the callee's work really needs a
    ~ copy of the array anyway (ie. there is no inplacing possible because
    ~ of an index dependency etc.)
    ~ the caller, unless it doesnt use the var that is the callee's return
    ~ target, should clone the var before sending it in. when possible, that
    ~ clone can be on the callers stack frame etc.
    if not zero
        mQnew[1,  :] = mQnew[ 2, :] # this causes mQnew to be same:mq since no dep
        mQnew[:,  1] = mQnew[:,  2]
        mQnew[-1, :] = mQnew[-2, :]
        mQnew[:, -1] = mQnew[:, -2]
        mQnew[1,  :] = mq[2,  :] # this is a dep on mq, so the copy really happens
        mQnew[:,  1] = mq[:,  2]
        mQnew[-1, :] = mq[-2, :]
        mQnew[:, -1] = mq[:, -2]
    else
        mQnew[1,  :] = 0  # again no dep of mQnew pn vQ
        mQnew[:,  1] = 0
        mQnew[-1, :] = 0
        mQnew[:, -1] = 0
    end if

    ~ return mQnew
end function

func boundary1d(vQ,zero) result(mQnew)
    real(d) vQ(:)
    real(d) mQnew(size(vQ))
   :YesOrNo, optional : zero
   :YesOrNo zero_
   :integer n

    zero_=.false.; if (present(zero)) zero_=zero

    mQnew = vQ

    n = size(vQ)

    if (.not.zero_) then
        mQnew(1)  = mQnew(2)
        mQnew(n)  = mQnew(n-1)
    else
        mQnew(1)  = 0.0d0
        mQnew(n)  = 0.0d0
    end if

end func
