

type Obj
    var acx Obj
    var s = 22
end
type Obj2
    var o Obj
end

test "8 equals itself"
    check 8 == 8
end

test "9 equals itself"
    check 9 == 9
end

func start()
    ~ ans = 0
    var v = 31
    var d = Obj()
    ~ d.s=99
    d.acx=d
    print(d)
    var f = 66
    var a = [4, 5]
    var h = v +6 + a[2] ~ not doing any good
    var c = 44
    ans = c
    ~ if h = 5 ~ this should be implicitly if let x = ...
    ~   ~ this way for x = ... and if x = ... introduce a new var x
    ~ end
    ~ 4. insert the promoted expr BEFORE the current stmt
    ~        li_push(prev ? &prev : &self->stmts, pcClone);
    ~        PtrList* tmp = prev->next;
    ~ THIS SHOULD BE in PtrList as insertAfter method
    var mx = 2
    while h == 0
        if h==78
            var b = 45 + v
            if 5 == 4
                print(mx)
                v = b
            end
            print(mx)
            print(b)
        end
    end
    while h == 7 ~["hj","op"]
        var c = 7 + v
        if yes
            var ds = 3
            if yes
                var mm = 5 + c + ds
            end
        end
    end
    match "asd"
    case "33"
        var aa = 44
        print(aa)
    case "33"
        var aa = 4
    end
    print(f)
    ~ print(v)
    print(f)
    var g = 7 / v + 4 + v^2
    print(g)
end


~ who can drop what?
~ any scope can drop its own vars
~ a nonloop scope can drop its parents var until the first loop scope is encountered up the chain (whose vars can also be dropped in the child scope).
~ a loop scope cannot drop any parent vars
