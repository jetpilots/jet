decl func push(arr Any, item Any)
decl func pop(arr Any)
decl func concat(arr Any, arr2 Any)
decl func describe(what Any)
decl func print(what Any)
decl type Strs end
~ do declare type
decl type Any end

type Something
   var x = 4
   var y = 2
end

~ implement op_div, op_mul etc. for arrays of numeric types.
~ BOTH inplace and non inplace versions!!
~ function push(arr Any, item Any)
~     var count = arr.count or 0
~     count = count + 1
~     arr[count] = item
~     arr.count = count
~ end

~ function pop(arr Any)
~     var count = arr.count or 0
~     var ret = nil
~     if count > 0
~         count = count - 1
~         ret =  arr[count]
~         arr[count] = nil
~     end
~     return ret
~ end

func start(a Strs)
    var arr Number[] = [1, 2, 3, 4, 5]
    ~ literal ints hint at int unless a division or other op is found
    ~ generate the above = to a `Array_init_cArray` call
    push(arr, 3)
    var m = pop(arr!)
    push(arr, 4)
    arr = 3 + 4
    push(arr, m)

    concat(arr!, [5, 6, 7, 8])
    ~ just a `Array_concat_cArray` call
    var arrd as Number[] = arr / 2
    ~ asking for double
    describe(arr)
    ~ 4-element Array<Int>... [ 1, 2, 3, 5]
    print(arrd)
    ~ [1.0, 2.0, 3.0, 5.0]

    ~ var bgs as Dict
    ~ bgs["set"] = 5
    ~ bgs["get"] = 8
    ~ describe(bgs)
    ~ print(bgs)

end

