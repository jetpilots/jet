type Complex
    var re = 0
    var im = 0
end type

function init(c as Complex, re as Number, im as Number)
    c.re = re
    c.im = im
    check conjugate(c) == 7 + 4i
end function

test complexItem1
    check Complex(re=3, im=4) == 3 + 4i
    Complex(re=1, im=0) -> 1 + 0i
    Complex(re=1, im=0) => 1 + 0i
end test

# function Complex(re Number, im Number) returns (out Complex)
#     out = Complex()
#     out.re = re
#     out.im = im
# end function

Complex(re as Number) := Complex(re, 0)

enum CollType as BaseObject
    none
    array
    list
    tensor2D = 8
    tensor3D
    tensor4D
    orderedSet
    sortedSet
end enum

# main returns nothing, since the error handling mechanism will report
# any issues to the caller of main.
# declare type Strings
function main()
    # constructor call must have all named args
    var c = Complex() # disallow this
    var c2 = 4 + 3i # this should be used
    var d = [2, 3, 4, 5, 6, 7, 8]
    var c3 as Complex = c2 + 4
    print(d[:])
    # describe(d)
    # print(args[9])
    # json(d)
    # d[:] += 6
    print(d[9]+6)
    json(c)
    var q = sum(d)
    # doarr()
end function

# disallow func name used as arg or ret name
# function sum(x[:] as Number) as Number
#     for elem in x[:] do sum += elem
# end function

function sum as Number (x as Number[])
    for elem in x[:] do s += elem
end function

function doarr()
    var arr[] = [3, 4, 5; 6, 7, 8; 9, 10, 11]
    print(arr)
    describe(arr)
    describe(sum(arr))
    json(arr)
    arr[2,-1] = 0
    describe(sum(arr))
end function

