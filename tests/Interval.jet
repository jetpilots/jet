
type _Range
    var lo = 0
    var _hi = 0
    always lo <= hi
end type

~ only funcs, types and module lets can be named starting with a _
~ (case restrictions still apply) and these will be private i.e. not show up
~ in IDE autocomplete etc.
~ ALL functions will anyway be C static since we build monolithic. If ever
~ incremental compilation is brought in, let's see, we'll need to mark publics
~ instead of marking privates.

~ *** JUST DO THIS: declare it UB for private vars to be written, ask all IDEs
~ to filter out _var names, and be done with it.

~ funcs using a private type must be private!
products(a as _Range, b as Range) :=
    [ a.lo*b.lo, a.lo*b.hi, a.hi*b.lo, a.hi*b.hi ]

~ if you want to make types public/private as well, then types containing
~ items of private type must themselves be private. unless you plan on making
~ type members private / public! (which might be better)

let some = _Range(5) # vars can still remain public since they are eval'd

Range(x as Real) :=
    Range(lo = x, hi = x)

add(a as Range, b as Range) :=
    Range(lo = a.lo + b.lo, hi = a.hi + b.hi)

sub(a as Range, b as Range) :=
    Range(lo = a.lo + b.lo, hi = a.hi + b.hi)

mul(a as Range, b as Range) :=
    Range(
        lo = min(products(a, b)),
        hi = max(products(a, b)))
    ~CSE for products() which is pure
    ~ i guess if it is a #define, then C backend will apply
    ~ CSE on the muls

function _div(a as Range, b as Range) result (ret as Range)
    requires not b contains 0
    ret = Range(lo = a.lo / b.lo, hi = a.hi / b.hi) # NO!!
end function

function log(a as Range) result (ret as Range)
    ~ range literals are just like array literals. How to disambiguate?
    ~ requires not a intersects [-inf:0]
    requires a.lo > 0
    ret = Range(lo = log(a.lo), hi = log(a.hi))
end function

let _six = Range(6)

_log(a[] as Range) :=
    snap(Range(lo = log(a[:].lo), hi = log(a[:].hi)))

~ function log(a[] as Range) result (ret[] as Range)
function log(inp as List of Range)
    result ans as List of Range?
    var symTable as ASTNode[][Text]


    var symTable as {Text -> [ASTNode]}
    var symTable as {Text -> Number}
    var symTable as {Text -> {Text -> [ASTNode]}}
    var symList as [ASTNode]
    var symSet as {Text}

    var symTable as Dict of Text and List of ASTNode = {
        "map" = [ASTNode(kind = .tkOpColon)]
    }
    var symTable as Dict of Text of ASTNode = {
        "map" -> { .kind = .tkOpColon },
        "third" -> { .kind = .tkKeywordIf }
    }
    var symTable as Dict of Text and ASTNode = {
        "map" -> ASTNode(kind = .tkOpColon),
        "third" -> ASTNode(kind = .tkKeywordIf)
    }

    var d as Range = {
        .lo = 33,
        .hi = 35,
        .next = nil
    }

    ~ range literals are just like array literals. How to disambiguate?
    ~ resize(&ret, to = size(a))
    ~ requires a[0].lo > 0
    ~ requires not a intersects [-inf:0]
    ~ ret = snap(Range(lo = log(a[:].lo), hi = log(a[:].hi)))
    for i = 1:len(inp) do push(&ans, item=log(inp[i]))
    ans = snap(ans)
~  as List@Range
end function

function _recip(a as Range) result (ret as Range)
    requires not a contains 0
    ret = Range(lo=1/a.hi, hi=1/a.lo)
end function

function _sin(a as Range) result (ret as Range)
    ret = Range(lo=msin(a.lo), hi=mcos(a.hi))
    ensures ret within [-1:1]
end function

_flip(a as Range) :=
    Range(lo = -a.hi, hi = -a.lo)
 ~ * -1

~ negate(a as Range, b as Range) := [
~     Range(lo = a.lo + b.lo, hi = a.hi + b.hi),
~     Range(lo = a.lo + b.lo, hi = a.hi + b.hi),
~ ]
 ~ but this would ret = 2 intervals: [-1, 1] -> [-inf, -1], [1, +inf]
_negate(a as Range) :=
    NotInterval(lo = a.lo, hi = a.hi)

_unite(a as Range, b as Range) := Range(lo = a.lo + b.lo, hi=a.hi+b.hi)

_intersect(a as Range, b as Range) :=
    Range(lo = max(a.lo, b.lo), hi = min(a.hi, b.hi)) or None # might violate invariant

