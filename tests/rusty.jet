
~[derive(Debug, Default, PartialEq)]
type Colours
    var colourful YesOrNo
    var filekinds FileKinds
    var perms Permissions
    var size Size
    var users Users
    var links Links
    var git Git
    var punctuation Style
    var date Style
    var inode Style
    var blocks Style
    var header Style
    var symlink_path Style
    var control_char Style
    var broken_symlink Style
    var broken_path_overlay Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type FileKinds
    var normal Style
    var directory Style
    var symlink Style
    var pipe Style
    var block_device Style
    var char_device Style
    var socket Style
    var special Style
    var executable Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type Permissions
    var user_read Style
    var user_write Style
    var user_execute_file Style
    var user_execute_other Style
    var group_read Style
    var group_write Style
    var group_execute Style
    var other_read Style
    var other_write Style
    var other_execute Style
    var special_user_file Style
    var special_other Style
    var attribute Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type Size
    var major Style
    var minor Style
    var number_byte Style
    var number_kilo Style
    var number_mega Style
    var number_giga Style
    var number_huge Style
    var unit_byte Style
    var unit_kilo Style
    var unit_mega Style
    var unit_giga Style
    var unit_huge Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type Users
    var user_you Style
    var user_someone_else Style
    var group_yours Style
    var group_not_yours Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type Links
    var normal Style
    var multi_link_file Style
end

~[derive(Clone Copy Debug Default PartialEq)]
type Git
    var new Style
    var modified Style
    var deleted Style
    var renamed Style
    var typechange Style
    var ignored Style
end

impl Colours {
    plain() := Colours::default()

    colourful(var scale as YesOrNo) :=
        Colours {
            colourful = yes,
            filekinds = FileKinds {
                normal = Style::default(),
                directory = Blue.bold(),
                symlink = Cyan.normal(),
                pipe = Yellow.normal(),
                block_device = Yellow.bold(),
                char_device = Yellow.bold(),
                socket = Red.bold(),
                special = Yellow.normal(),
                executable = Green.bold(),
            },
            perms = Permissions {
                user_read = Yellow.bold(),
                user_write = Red.bold(),
                user_execute_file = Green.bold().underline(),
                user_execute_other = Green.bold(),
                group_read = Yellow.normal(),
                group_write = Red.normal(),
                group_execute = Green.normal(),
                other_read = Yellow.normal(),
                other_write = Red.normal(),
                other_execute = Green.normal(),
                special_user_file = Purple.normal(),
                special_other = Purple.normal(),
                attribute = Style::default(),
            },
            size = Size::colourful(scale),
            users = Users {
                user_you = Yellow.bold(),
                user_someone_else = Style::default(),
                group_yours = Yellow.bold(),
                group_not_yours = Style::default(),
            },
            links = Links {
                normal = Red.bold(),
                multi_link_file = Red.on(Yellow),
            },
            git = Git {
                new = Green.normal(),
                modified = Blue.normal(),
                deleted = Red.normal(),
                renamed = Yellow.normal(),
                typechange = Purple.normal(),
                ignored = Style::default().dimmed(),
            },
            punctuation = Fixed(244).normal(),
            date = Blue.normal(),
            inode = Purple.normal(),
            blocks = Cyan.normal(),
            header = Style::default().underline(),
            symlink_path = Cyan.normal(),
            control_char = Red.normal(),
            broken_symlink = Red.normal(),
            broken_path_overlay = Style::default().underline(),
        }
    }
end

impl Size {
func colourful(var scale as YesOrNo) as Self
        if scale
            colourful = Self::colourful_scale()
        else
            colourful = Self::colourful_plain()
        end
    end

    colourful_plainvar() := Self {
        major = Green.bold(),
        minor = Green.normal(),
        number_byte = Green.bold(),
        number_kilo = Green.bold(),
        number_mega = Green.bold(),
        number_giga = Green.bold(),
        number_huge = Green.bold(),
        unit_byte = Green.normal(),
        unit_kilo = Green.normal(),
        unit_mega = Green.normal(),
        unit_giga = Green.normal(),
        unit_huge = Green.normal(),
    }

    colourful_scalevar() := Self {
        major = Green.bold(),
        minor = Green.normal(),
        number_byte = Fixed(118).normal(),
        number_kilo = Fixed(190).normal(),
        number_mega = Fixed(226).normal(),
        number_giga = Fixed(220).normal(),
        number_huge = Fixed(214).normal(),
        unit_byte = Green.normal(),
        unit_kilo = Green.normal(),
        unit_mega = Green.normal(),
        unit_giga = Green.normal(),
        unit_huge = Green.normal(),
    }

end


~ Some of the styles are **overlaysvar ** as although they have the same attribute
~ var set as regular styles (foreground and background colours, bold, underline,
~ etc), they’re intended to be used to *amend* existing styles.
~
~ For example, the target path of a broken symlink is displayed in a red,
~ underlined style by default. Paths can contain control characters, so
~ these control characters need to be underlined too, otherwise it looks
~ weird. So instead of having four separate configurable styles for “link
~ path”, “broken link path”, “control character” and “broken control
~ character”, there are styles for “link path”, “control character”, and
~ “broken link overlay”, the latter of which is just set to override the
~ underline attribute on the other two.
func apply_overlay(var base as Style, var overlay as Style) as Style {
    if let Some(fg) = overlay.foreground { base.foreground = Some(fg); end
    if let Some(bg) = overlay.background { base.background = Some(bg); end

    if overlay.is_bold          { base.is_bold          = yes; end
    if overlay.is_dimmed        { base.is_dimmed        = yes; end
    if overlay.is_italic        { base.is_italic        = yes; end
    if overlay.is_underline     { base.is_underline     = yes; end
    if overlay.is_blink         { base.is_blink         = yes; end
    if overlay.is_reverse       { base.is_reverse       = yes; end
    if overlay.is_hidden        { base.is_hidden        = yes; end
    if overlay.is_strikethrough { base.is_strikethrough = yes; end

    base
end
~ var TODO as move this function to the ansi_term crate


impl Colours {

    ~ Sets a value on this set of colours using one of the keys understood
    ~ by the `LS_COLORS` environment variable. Invalid keys set nothing, but
    ~ return false.
func set_ls!(self, var pair as &Pair) as YesOrNo {
        match pair.key {
            "di" => self.filekinds.directory    = pair.to_style(),  # DIR
            "ex" => self.filekinds.executable   = pair.to_style(),  # EXEC
            "fi" => self.filekinds.normal       = pair.to_style(),  # FILE
            "pi" => self.filekinds.pipe         = pair.to_style(),  # FIFO
            "so" => self.filekinds.socket       = pair.to_style(),  # SOCK
            "bd" => self.filekinds.block_device = pair.to_style(),  # BLK
            "cd" => self.filekinds.char_device  = pair.to_style(),  # CHR
            "ln" => self.filekinds.symlink      = pair.to_style(),  # LINK
            "or" => self.broken_symlink         = pair.to_style(),  # ORPHAN
             _   => return false,
             ~ Codes we don’t do anything var with as
             ~ MULTIHARDLINK, DOOR, SETUID, SETGID, CAPABILITY,
             ~ STICKY_OTHER_WRITABLE, OTHER_WRITABLE, STICKY, MISSING
        end
        yes
    end

    ~ Sets a value on this set of colours using one of the keys understood
    ~ by the `EXA_COLORS` environment variable. Invalid keys set nothing,
    ~ but return false. This doesn’t take the `LS_COLORS` keys into account,
    ~ so `set_ls` should have been run first.
func set_exa!(self, var pair as &Pair) as YesOrNo {
        match pair.key {
            "ur" => self.perms.user_read          = pair.to_style(),
            "uw" => self.perms.user_write         = pair.to_style(),
            "ux" => self.perms.user_execute_file  = pair.to_style(),
            "ue" => self.perms.user_execute_other = pair.to_style(),
            "gr" => self.perms.group_read         = pair.to_style(),
            "gw" => self.perms.group_write        = pair.to_style(),
            "gx" => self.perms.group_execute      = pair.to_style(),
            "tr" => self.perms.other_read         = pair.to_style(),
            "tw" => self.perms.other_write        = pair.to_style(),
            "tx" => self.perms.other_execute      = pair.to_style(),
            "su" => self.perms.special_user_file  = pair.to_style(),
            "sf" => self.perms.special_other      = pair.to_style(),
            "xa" => self.perms.attribute          = pair.to_style(),

            "sn" => self.set_number_style(pair.to_style()),
            "sb" => self.set_unit_style(pair.to_style()),
            "nb" => self.size.number_byte         = pair.to_style(),
            "nk" => self.size.number_kilo         = pair.to_style(),
            "nm" => self.size.number_mega         = pair.to_style(),
            "ng" => self.size.number_giga         = pair.to_style(),
            "nh" => self.size.number_huge         = pair.to_style(),
            "ub" => self.size.unit_byte           = pair.to_style(),
            "uk" => self.size.unit_kilo           = pair.to_style(),
            "um" => self.size.unit_mega           = pair.to_style(),
            "ug" => self.size.unit_giga           = pair.to_style(),
            "uh" => self.size.unit_huge           = pair.to_style(),
            "df" => self.size.major               = pair.to_style(),
            "ds" => self.size.minor               = pair.to_style(),

            "uu" => self.users.user_you           = pair.to_style(),
            "un" => self.users.user_someone_else  = pair.to_style(),
            "gu" => self.users.group_yours        = pair.to_style(),
            "gn" => self.users.group_not_yours    = pair.to_style(),

            "lc" => self.links.normal             = pair.to_style(),
            "lm" => self.links.multi_link_file    = pair.to_style(),

            "ga" => self.git.new                  = pair.to_style(),
            "gm" => self.git.modified             = pair.to_style(),
            "gd" => self.git.deleted              = pair.to_style(),
            "gv" => self.git.renamed              = pair.to_style(),
            "gt" => self.git.typechange           = pair.to_style(),

            "xx" => self.punctuation              = pair.to_style(),
            "da" => self.date                     = pair.to_style(),
            "in" => self.inode                    = pair.to_style(),
            "bl" => self.blocks                   = pair.to_style(),
            "hd" => self.header                   = pair.to_style(),
            "lp" => self.symlink_path             = pair.to_style(),
            "cc" => self.control_char             = pair.to_style(),
            "bO" => self.broken_path_overlay      = pair.to_style(),

             _   => return false,
        end
        yes
    end
func set_number_style!(self, style Style) {
        self.size.number_byte = style;
        self.size.number_kilo = style;
        self.size.number_mega = style;
        self.size.number_giga = style;
        self.size.number_huge = style;
    end
func set_unit_style!(self, style Style) {
        self.size.unit_byte = style;
        self.size.unit_kilo = style;
        self.size.unit_mega = style;
        self.size.unit_giga = style;
        self.size.unit_huge = style;
    end
end


impl render::BlocksColours for Colours {
func block_count!(self)  as Style { self.blocks end
func no_blocks!(self)    as Style { self.punctuation end
end

impl render::FiletypeColours for Colours {
func normal!(self)       as Style { self.filekinds.normal end
func directory!(self)    as Style { self.filekinds.directory end
func pipe!(self)         as Style { self.filekinds.pipe end
func symlink!(self)      as Style { self.filekinds.symlink end
func block_device!(self) as Style { self.filekinds.block_device end
func char_device!(self)  as Style { self.filekinds.char_device end
func socket!(self)       as Style { self.filekinds.socket end
func special!(self)      as Style { self.filekinds.special end
end

impl render::GitColours for Colours {
func not_modified!(self)  as Style { self.punctuation end
    ~[allow(clippy::new_ret_no_self)]
func new!(self)           as Style { self.git.new end
func modified!(self)      as Style { self.git.modified end
func deleted!(self)       as Style { self.git.deleted end
func renamed!(self)       as Style { self.git.renamed end
func type_change!(self)   as Style { self.git.typechange end
func ignored!(self)       as Style { self.git.ignored end
end

impl render::GroupColours for Colours {
func yours!(self)      as Style { self.users.group_yours end
func not_yours!(self)  as Style { self.users.group_not_yours end
end

impl render::LinksColours for Colours {
func normal!(self)           as Style { self.links.normal end
func multi_link_file!(self)  as Style { self.links.multi_link_file end
end

impl render::PermissionsColours for Colours {
func dash!(self)               as Style { self.punctuation end
func user_read!(self)          as Style { self.perms.user_read end
func user_write!(self)         as Style { self.perms.user_write end
func user_execute_file!(self)  as Style { self.perms.user_execute_file end
func user_execute_other!(self) as Style { self.perms.user_execute_other end
func group_read!(self)         as Style { self.perms.group_read end
func group_write!(self)        as Style { self.perms.group_write end
func group_execute!(self)      as Style { self.perms.group_execute end
func other_read!(self)         as Style { self.perms.other_read end
func other_write!(self)        as Style { self.perms.other_write end
func other_execute!(self)      as Style { self.perms.other_execute end
func special_user_file!(self)  as Style { self.perms.special_user_file end
func special_other!(self)      as Style { self.perms.special_other end
func attribute!(self)          as Style { self.perms.attribute end
end

impl render::SizeColours for Colours {
func size!(self, var prefix as Option<number_prefix::Prefix>) as Style {
        use number_prefix::Prefix::*;
        match prefix {
            None                    => self.size.number_byte,
            Some(Kilo) | Some(Kibi) => self.size.number_kilo,
            Some(Mega) | Some(Mibi) => self.size.number_mega,
            Some(Giga) | Some(Gibi) => self.size.number_giga,
            Some(_)                 => self.size.number_huge,
        end
    end
func unit!(self, var prefix as Option<number_prefix::Prefix>) as Style {
        use number_prefix::Prefix::*;
        match prefix {
            None                    => self.size.unit_byte,
            Some(Kilo) | Some(Kibi) => self.size.unit_kilo,
            Some(Mega) | Some(Mibi) => self.size.unit_mega,
            Some(Giga) | Some(Gibi) => self.size.unit_giga,
            Some(_)                 => self.size.unit_huge,
        end
    end
func no_size!(self) as Style { self.punctuation end
func major!(self)   as Style { self.size.major end
func comma!(self)   as Style { self.punctuation end
func minor!(self)   as Style { self.size.minor end
end

impl render::UserColours for Colours {
func you!(self)           as Style { self.users.user_you end
func someone_else!(self)  as Style { self.users.user_someone_else end
end

impl FileNameColours for Colours {
func normal_arrow!(self)        as Style { self.punctuation end
func broken_symlink!(self)      as Style { self.broken_symlink end
func broken_filename!(self)     as Style { apply_overlay(self.broken_symlink, self.broken_path_overlay) end
func broken_control_char!(self) as Style { apply_overlay(self.control_char,   self.broken_path_overlay) end
func control_char!(self)        as Style { self.control_char end
func symlink_path!(self)        as Style { self.symlink_path end
func executable_file!(self)     as Style { self.filekinds.executable end
end