
function Type1()
end function

type Type1
    var f = 33
end type

type Type2 extends Type1
    var m = 32
    var g = 'StringValue'
    # var fg = "String{In}terp $pool.usageCount[pool.shape(0)]@6.2f {m}"
    # var fsg = "String{In}terp $pool.usageCount {m}"
    # var fdg = "String{In}terp $usageCount {m}"
    # var fag = "String{In}terp " .. base44.cg54e.nets[7] .. ": " .. m
    # var f3g = "String{In}terp " $ base44.cg54e.nets[7] $ ": " $ m
    # var ffg = "String{In}terp " base44.cg54e.nets[7]@6.2f ": " m
    # var fbg = "String{In}terp " .. format(base44.cg54e.nets[7], width=6) .. ": " .. m
    # var ifg = "String{In}terp " _ base44.cg54e.nets[7]@6.2f _ ": " _ m
    var garr = [  ]   # ~5ef4ed5e
    #    ]
    #       3 , # ~ed4
    # 4, 5, 6 ]
    var b = unhex('5e43efc2')
    var gmap = {} #
    # } # comment allez-vous
        # "first" = 42} #,
        # "second" = 67i,
        # "third" = 44 }
    # var c = garr[7]
    # var d = gmap["bonh"]
    # var t1 = Type1 { f = 33 , g = 45 }
    # var t2 = Type1(f=33, g=45)
end type

declare type Byte
declare function unhex(s as String) as Byte[:,:]

sets(g as Number) := g  #


function start()
    var arg1=sets(5)
    maisn("k",b="jk")
    print(arg1)
    return
    var t1 = Type1()
    var t2 = Type2()
    var td = {"t1"= t1, "t2"= t2}
    var ts = [1, 2, 1]
    var gg = ts[3]
    var t3 = { "reted" = 34, "res" = 2 }
    t2.g = "8"
end function

enum Enum1
    enumVal1
    enumVal2
    enumVal3
end enum

function maisn(n as String, b as String)
    print(6)
end function

# function redt(n as String) as String
#     return n
# end function

redt(n as String) := n

test 'basics'
    let x = 34
    print(x)
    let m = "my name is Antonio"
    let n = "thirty-five Jackdaws"
    check m == redt(n)
    check 3 < x < 99
end test
