~ #!/usr/local/bin/jetc

enum ASTTypeTypes
    unresolved = 0
end

enum ASTCollectionTypes
    none = 0
end

enum ASTTokenKinds
    unknown = 0
    newline
    oneSpace
    keywordFor
    keywordIf
    number
    string
    identifier
    resolvedIdentifier
end

var e  = ASTTokenKinds.string

~ e = .newline

~ func f(xyz Number, kind ASTTokenKinds)
~  ...
~ end
~ func f(xyz Number, n2 Number)
~  ...
~ end


~ f(5, kind=.newline)
~ f(6, n2=8)

decl type ASTImport
    var name = ""
    var aliasOffset = 0
    var isPackage = no
    var hasAlias = no
end

decl type ASTUnits
    var powers Number[]
    var factor = 0
    var factors Number[]
    var label = ""
end

decl type ASTTypeSpec
    var ttype ASTType = nil
    var name = ""
    var units ASTUnits = nil

    var dims = 0
    var col = 0
    var line = 0

    var typeType ASTTypeTypes = .unresolved
    var collectionType ASTCollectionTypes = .none
    var nullable = no
end

decl type ASTVar
    var typeSpec ASTTypeSpec = nil
    var init ASTExpr = nil
    var name = ""
    var line = 0
    var col = 0
    var used = no
    var changed = no
    var isLet = no
    var isVar = no
    var stackAlloc = no
    var isTarget = no
    var printed = no
    var escapes = no
    var canInplace = no
    var returned = no
end

decl type ASTExpr
    var line = 0
    var col = 0
    var typeType = ASTTypeTypes.unresolved
    var collectionType = ASTCollectionTypes.none
    var nullable = no
    var impure = no
    var elemental = no
    var throws = no
    var promote = no
    var canEval = no
    var didEval = no
    var prec = 0
    var unary = no
    var rassoc = no
    var kind = ASTTokenKinds.unknown
    var left ASTExpr = nil
    var ffunc ASTFunc = nil
    var vvar ASTVar = nil
    var body ASTScope = nil
    var right ASTExpr = nil
end

decl type ASTScope
    var stmts ASTExpr[]
    var locals ASTVar[]
    var parent ASTScope = nil
end

decl type ASTType
    var super ASTTypeSpec = nil
    var name = ""
    var body ASTScope = nil
    var line = 0
    var col = 0
    var analysed = no
    var isValueType = no
end

decl type ASTFunc
    var body ASTScope = nil
    var args ASTVar[]
    var argCount = 0

    var returnSpec ASTTypeSpec = nil
    var name = ""
    var selector = ""
    var line = 0
    var usesIO = no
    var throws = no

    var isRecursive = no
    var usesNet = no
    var usesGUI = no
    var usesSerialisation = no
    var isExported = no
    var usesReflection = no
    var nodispatch = no
    var isStmt = no
    var isDeclare = no
    var isCalledFromWithinLoop = no
    var elemental = no
    var isDefCtor = no
    var analysed = no
 end

decl type ASTTest
    var body ASTScope = nil
    var name = ""
    var line = 0
    var analysed = no
end

decl type ASTModule
    var imports ASTImport[]
    var funcs ASTFunc[]
    var tests ASTTest[]
    var types ASTType[]
    var enums ASTType[]
    var scope ASTScope = nil
    var name = ""
    var moduleName = ""
end

type Koi
var g = 89
end

type Nih
var m = 6
var mm = Koi()
end

function start()
    var x = Nih()
    print("$X.mm.g $x.MM.g ui $x.mm.G")
end
