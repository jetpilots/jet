
gSum(buffer Number)        := allReduce(buffer, op=.sum)
gSum(buffer Number[])      := allReduce(buffer, op=.sum)
gSum(buffer Number[2D])   := allReduce(buffer, op=.sum)
gSum(buffer Number[3D]) := allReduce(buffer, op=.sum)
gSum(buffer Int)         := allReduce(buffer, op=.sum)
gSum(buffer Int[])       := allReduce(buffer, op=.sum)
gSum(buffer Int[2D])    := allReduce(buffer, op=.sum)
gSum(buffer Int[3D])  := allReduce(buffer, op=.sum, team=6)

template (T, S)
func gSum(buffer T) result (output T)
    output = allReduce(buffer, op=.sum)
end

gSum(buffer <T>) := allReduce(buffer, op=.sum)

func allReduce(buffer <T>, op MPIOperations, team = kMPICOMMWORLD)
    if not mpi.enabled then return
    var output <T>
    ccall('MPI_AllReduce', buffer, output, buffer.size, mpiType(buffer), op, team)
end

~ how about allowing refs to value types?

~ var s = "hello"
~ var c = ref(s[7]) ??? nah
~ var cg = s[1] -- these are immutable refs, so theyre implemented as copy for primitives & ptr otherwise
~ ref c = s[1] --- ok, ref is then a mutable ref ie ptr
~ nah, better find a way to change array indexing into ptr arithmetic when index itself is unused


~ btw dont allow arrays of arrays or else ppl will do arr[a][b] and conflate with arr[a,b]

enum MPITypes
end enum

enum MPIOperations
end enum

mpiType(buffer Number) := MPITypes.real
mpiType(buffer Number[]) := MPITypes.real
mpiType(buffer Number[2D]) := MPITypes.real
mpiType(buffer Number[3D]) := MPITypes.real
~ mpiType(buffer Number or Number[] or Number[2D] or Number[3D]) := MPITypes.real

~ REALLY MUST GET RID OF REAL/INT AND KEEP ONE UNIFIED NUM TYPE

~ gSum(buffer Number or Number[] or Number[2D] or Number[3D]) := MPITypes.real
~ throw syntax error if user defines gSum again for one of the types from here
~ actually that is what will happen anyway since the generated funcs from here
~ will be in conflict!


NOPE gSum(buffer Number[?]) := MPITypes.real
NOPE gSum(buffer Number[2D]) := gSum2D(buffer) ~ let's say there is such a func
~ I know in case of multiple matches the most specific can be taken simply
~ but the user will always think WHICH ONE IS GOING TO BE USED????
~ SO FOR HEAVENS SAKE LET IT GO
~ NO TEMPLATING!!!


~ basically this is an elemental func:
NOPE function func(arg Number[?])
~ where [?] means this is a template (not on the type but) on the dimensions.
~ it does the same thing as F90 elemental funcs: the same func is valid for
~ scalar as well as array args of any dimension, with the caveat that it can
~ only operate elementwise (no reductions etc.)
~ the syntax suggests I can index arg within the func, which is not true.
~ SO DROP IT!!

func y(x Number) := 4 + x
func funcy(x Number[]) as Number[]
    resize(&out, like=x) ~ arrays cannot be null, but empty. they are init'd empty too, not null
    out = zerosLike(x)
    out.size = x.size
    for i = 1:len(x) do out[i] = funcy(x[i])
    out[:] = [func(xi), for xi = x[x%2==0]]
    out[-1] = 3
    out[1:-1] = 51.2
    out[1:] = 5
end
