

type XTy
    var cs3 = "C3PO is here"
    var mm = 34
    ~ always mm < 78
~init ~ default ctor
~ basic assignments happen anyway in all ctors
~init (withMm Int) ~ call XTy(withMm=7)
   ~ check withMm < 89
   ~ mm = withMm
~drop
 ~   close!(f)
end

enum ETS
  test3 = 8 ~ + print(8)
  test4 = 6
end

~ ---
~ var x = ETS.test3 ~ enum member access (numerical but dont say numerical)
~ var val Number = ETS[test3] ~ enum associated data access
~ var x = ETS(56) ~ convert number, compiletime or runtime
~ var x = ETS("test3") ~ convert str, compiletime or runtime
~ ~ ^ need implicit convert? maybe not:
~ var x ETS = val or .test3
~ var x = ETS(val) or .test4
~ ---


declare type Tx
end

declare function Tx()

var lm = 7

~ deprecated "Please use this instead" start(args String[])
func start()
    var cs = "Hello world"
    var cd = 34 + 8 ~+lm
    var xt = xTY()
    var tt = tx()
    lm = 9
    ~ var ttt = tt.y
    print(xt)
    ~ if xre(cd)==9
    ~ end
    json(xt)
    ~ var arr = [   9, 8, 7, 6, 5, 4 ]
    match cd
    case 4
        print(xt) ~+ ui.
    case 5
        json(xt)
    end
    ~ ~ print(arr[2])
    ~ arr[2] = arr[5] + 6
    var ee ETS = ETS.test4
    ~ if ee == .test4
    ~ end
    match ee
    case .test3
    case .test4
    end

    var ggf =
        45
    json(ggf)
    ~     function (iuy Number) ~capture (ee, cd)
    ~         print("yui $cd ")
    ~     end

    ~ ns.updateWindowAnimation(win, animate=yes, callback=
    ~     function !(win NSWin, boo Bool)
    ~         win.title = 'Hello'
    ~     end
    ~ )
    ~ print(ee)
    ~ describe(arr[2])
    ~ describe(xt)
end
