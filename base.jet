~ Basic types
decl type Any end
decl type String extends Regex end
decl type Regex extends Any end
decl type Boolean extends Number end
decl type Number extends Any end
decl type Range extends Any end
decl type Size extends Any end
decl type Point extends Any end
decl type Rect extends Any end

~ pseudo type for templates
~ T does not include collections. For that use T[].
decl type T end

func empty(x Any) end

json(s String) := '\"$s\"'
json(n Number) := '$n'
func json(b Boolean) String
    var s = ['no','yes']
    ans = s[b+1]
end

func json(obj T) String
    ans = "{"
    for (k, v) = obj
        ans += '"$k": $1' % json(v)
    end
    ans += "}"
end

func json(arr T[]) String
    ans = "["
    for v = arr
        ans += "$1" % json(v)
    end
    ans += "]"
end

~ Collection types. basically they have 1 implicit template param
~ and on jet level they are all represented by [].
decl type Collection end
decl type Array extends Collection end
decl type List extends Collection end
decl type DList extends Collection end
decl type LazyArray extends Collection end ~ in contrast to generator, caches its values end
decl type Generator extends Collection end
decl type Filter extends Collection end
decl type Slice extends Collection end
decl type Selection extends Collection end
decl type Set extends Collection end
decl type Dict extends Collection end
decl type Vector extends Array end
decl type SparseVector extends Vector end
decl type Tensor2D extends Collection end
decl type Matrix extends Tensor2D end
decl type DiagMatrix extends Matrix end
decl type TriDiagMatrix extends Matrix end
decl type PentaDiagMatrix extends Matrix end
decl type BandedMatrix extends Matrix end
decl type SymmMatrix extends Matrix end
decl type SkewSymmMatrix extends Matrix end
decl type SparseMatrix extends Matrix end
decl type Tensor3D extends Collection end
decl type Tensor4D extends Collection end
decl type Tensor5D extends Collection end
decl type Tensor6D extends Collection end
decl type Tensor7D extends Collection end


func argcheck(ex Expr._, fns Funct[])
    for fn = fns
        for (fnArg, arg) = zip(fn.args, ex)
            ~ ^ for x = y is generated as
            ~ iters_y(x, y, ...T) so this becomes
            ~ iters_zip(fnArg, arg, fn.args, ex, T1, T2, T3, T4)
            ~ similarly
            ~ iters_each(x, y, Tx, Ty)
            ~ iters_range(i, IntRange_snew(1,String_len(b)))
            ~ iters_each(x, Filter_snew(y, expr))
            ~ iters_dict(k,v,x,y)
            ~ iters_enumerate(i,v,x, y))
            if arg.kind == .assign
                if arg.left.string != fnArg.name
                    continue fn
                end
                arg = arg.right
            end
            if arg.type != fnArg.type
                continue fn
            end
        end
        ans = fn
        return
    end
end

func zip(l List, e Expr)
    var li = begin(l)
    var ex = ref(e) ~ new ref, this is const T*, not const T* const
    while yes
        var a = each!(li) or break ~ copy li implicitly since each is mutating arg1
        ~ actualluy you just want to mutate the ptr which is local!...
        var b = each!(ex) or break
        yield a, b
    end
end
~ this is how you can write each for a list & for an expr
func each!(li List) Expr
    ~ if you just mut the arg you dont need extra caller var. but you should implicitly copy the ptr .
    ~ caller var lii = li ~ the caller has to init this! caller vars
    ~ can only be initd with const or one of the other args
    yield li[1] or nil
    li=next(li) ~ this next is cdr basically
end
func each!(ex Expr) Expr ~ walk right-associtive comma expr
    ~ caller var pos = ex
    yield (ex.kind == .comma ? ex.left : ex) or nil
    ex = ex.right
end

~ Operators. this is how the compiler knows if ops have valid operands etc:
~ if an op is defined, it works, else compiler throws type error.

~ usual rules of upcasting/downcasting apply; can be used on poly vars
func +=(a Number, b Number) Number end

func [](a T[], idx Number) T end
